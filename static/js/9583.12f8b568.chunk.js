"use strict";(self.webpackChunkdashboard=self.webpackChunkdashboard||[]).push([[9583],{19583:(e,t,r)=>{r.r(t),r.d(t,{default:()=>U});var i=r(27366),s=r(76200),a=r(62044),o=r(10064),n=r(93002),l=r(97642),p=r(66978),d=r(49861),u=r(25243),c=(r(63780),r(93169),r(38511)),h=r(69912),y=r(31201),m=r(25265),v=r(53866),g=r(82582),b=r(92975),f=r(30651),x=r(27961),_=r(6741),S=r(11936),w=r(6693),I=r(46671),C=r(6061),T=r(29598),M=r(71684),O=r(56811),E=r(18870),R=r(99063),Z=r(45948),F=r(44041),L=r(83690),P=r(77990),j=r(58132),N=r(26704),k=r(6701);let q=class extends((0,w.h)((0,R.n)((0,O.M)((0,E.x)((0,_.O)((0,S.Y)((0,C.q)((0,T.I)((0,l.R)((0,M.Q)((0,x.V)((0,I.N)(f.Z))))))))))))){constructor(){super(...arguments),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(p.r9).then((()=>this._fetchService(t)))),Promise.resolve(this)}readImageFormat(e,t){const r=t.supportedImageFormatTypes;return r&&r.includes("PNG32")?"png32":"png24"}writeSublayers(e,t,r,i){var s;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten((e=>{let{sublayers:t}=e;return t&&t.toArray().reverse()})).toArray();let o=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&null!==(s=this.capabilities.exportMap)&&void 0!==s&&s.supportsDynamicLayers){const e=(0,m.M9)(i.origin);if(e===m.s3.PORTAL_ITEM){const e=this.createSublayersForOrigin("service").sublayers;o=(0,j.QV)(a,e,m.s3.SERVICE)}else if(e>m.s3.PORTAL_ITEM){const e=this.createSublayersForOrigin("portal-item");o=(0,j.QV)(a,e.sublayers,(0,m.M9)(e.origin))}}const n=[],l={writeSublayerStructure:o,...i};let p=o;a.forEach((e=>{const t=e.write({},l);n.push(t),p=p||"user"===e.originOf("visible")})),n.some((e=>Object.keys(e).length>1))&&(t.layers=n),p&&(t.visibleLayers=a.filter((e=>e.visible)).map((e=>e.id)))}createExportImageParameters(e,t,r,i){var s;const a=(null===i||void 0===i?void 0:i.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const o=new F.R({layer:this,floors:null===i||void 0===i?void 0:i.floors,scale:(0,g.yZ)({extent:e,width:t})*a}),n=o.toJSON();o.destroy();const l=null===i||void 0===i||!i.rotation||this.version<10.3?{}:{rotation:-i.rotation},p=null===(s=e)||void 0===s?void 0:s.spatialReference,d=(0,b.B9)(p);n.dpi*=a;const u={};if(null!==i&&void 0!==i&&i.timeExtent){const{start:e,end:t}=i.timeExtent.toJSON();u.time=e&&t&&e===t?""+e:"".concat(null!==e&&void 0!==e?e:"null",",").concat(null!==t&&void 0!==t?t:"null")}else this.timeInfo&&!this.timeInfo.hasLiveData&&(u.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:d,imageSR:d,size:t+","+r,...n,...l,...u}}async fetchImage(e,t,r,i){const{data:s}=await this._fetchImage("image",e,t,r,i);return s}async fetchImageBitmap(e,t,r,i){const{data:s,url:a}=await this._fetchImage("blob",e,t,r,i);return(0,L.g)(s,a,null===i||void 0===i?void 0:i.signal)}async fetchRecomputedExtents(){const e={...arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:t}=await(0,s.Z)(this.url,e),{extent:r,fullExtent:i,timeExtent:o}=t,n=r||i;return{fullExtent:n&&v.Z.fromJSON(n),timeExtent:o&&a.Z.fromJSON({start:o[0],end:o[1]})}}loadAll(){return(0,n.G)(this,(e=>{e(this.allSublayers)}))}serviceSupportsSpatialReference(e){return(0,N.D)(this,e)}async _fetchImage(e,t,r,i,a){var n,l,d;const u={responseType:e,signal:null!==(n=null===a||void 0===a?void 0:a.signal)&&void 0!==n?n:null,query:{...this.parsedUrl.query,...this.createExportImageParameters(t,r,i,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},c=this.parsedUrl.path+"/export";if(null!=(null===(l=u.query)||void 0===l?void 0:l.dynamicLayers)&&(null===(d=this.capabilities)||void 0===d||null===(d=d.exportMap)||void 0===d||!d.supportsDynamicLayers))throw new o.Z("mapimagelayer:dynamiclayer-not-supported","service ".concat(this.url," doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source."),{query:u.query});try{const{data:e}=await(0,s.Z)(c,u);return{data:e,url:c}}catch(h){if((0,p.D_)(h))throw h;throw new o.Z("mapimagelayer:image-fetch-error","Unable to load image: ".concat(c),{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:r}=await(0,s.Z)(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});r&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}};(0,i._)([(0,d.Cb)((0,k.mi)("dateFieldsTimeReference"))],q.prototype,"dateFieldsTimeZone",void 0),(0,i._)([(0,d.Cb)({type:Boolean})],q.prototype,"datesInUnknownTimezone",void 0),(0,i._)([(0,d.Cb)()],q.prototype,"dpi",void 0),(0,i._)([(0,d.Cb)()],q.prototype,"gdbVersion",void 0),(0,i._)([(0,d.Cb)()],q.prototype,"imageFormat",void 0),(0,i._)([(0,c.r)("imageFormat",["supportedImageFormatTypes"])],q.prototype,"readImageFormat",null),(0,i._)([(0,d.Cb)({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],q.prototype,"imageMaxHeight",void 0),(0,i._)([(0,d.Cb)({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],q.prototype,"imageMaxWidth",void 0),(0,i._)([(0,d.Cb)()],q.prototype,"imageTransparency",void 0),(0,i._)([(0,d.Cb)({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],q.prototype,"isReference",void 0),(0,i._)([(0,d.Cb)({json:{read:!1,write:!1}})],q.prototype,"labelsVisible",void 0),(0,i._)([(0,d.Cb)({type:["ArcGISMapServiceLayer"]})],q.prototype,"operationalLayerType",void 0),(0,i._)([(0,d.Cb)({json:{read:!1,write:!1}})],q.prototype,"popupEnabled",void 0),(0,i._)([(0,d.Cb)((0,k.mi)("preferredTimeReference"))],q.prototype,"preferredTimeZone",void 0),(0,i._)([(0,d.Cb)()],q.prototype,"sourceJSON",void 0),(0,i._)([(0,d.Cb)({json:{write:{ignoreOrigin:!0}}})],q.prototype,"sublayers",void 0),(0,i._)([(0,y.c)("sublayers",{layers:{type:[P.Z]},visibleLayers:{type:[u.z8]}})],q.prototype,"writeSublayers",null),(0,i._)([(0,d.Cb)({type:["show","hide","hide-children"]})],q.prototype,"listMode",void 0),(0,i._)([(0,d.Cb)({json:{read:!1},readOnly:!0,value:"map-image"})],q.prototype,"type",void 0),(0,i._)([(0,d.Cb)(Z.HQ)],q.prototype,"url",void 0),q=(0,i._)([(0,h.j)("esri.layers.MapImageLayer")],q);const U=q}}]);
//# sourceMappingURL=9583.12f8b568.chunk.js.map